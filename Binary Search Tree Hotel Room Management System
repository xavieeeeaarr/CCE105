package Earl;
import java.util.Scanner;

import java.util.Scanner;

public class labact1 {
    // Node class representing a room
    private class Room {
        int roomNumber; // Room number
        Room left, right; // Left and right child pointers

        public Room(int roomNumber) {
            this.roomNumber = roomNumber;
            left = right = null; // Initialize children as null
        }
    }

    private Room root; // Root of the binary search tree

    // Insert a room into the BST
    public void insert(int roomNumber) {
        root = insertRec(root, roomNumber);
    }

    // Recursive method to insert a room
    private Room insertRec(Room root, int roomNumber) {
        if (root == null) {
            return new Room(roomNumber); // Create a new room
        }
        // Decide to go left or right based on room number
        if (roomNumber < root.roomNumber) {
            root.left = insertRec(root.left, roomNumber); // Go left
        } else {
            root.right = insertRec(root.right, roomNumber); // Go right
        }
        return root; // Return the unchanged node
    }

    // Search for a room using preorder traversal
    public boolean searchPreorder(int roomNumber) {
        return searchPreorderRec(root, roomNumber);
    }

    // Recursive preorder search method
    private boolean searchPreorderRec(Room root, int roomNumber) {
        if (root == null) return false; // Room not found
        System.out.print(root.roomNumber + " "); // Print current room number
        if (root.roomNumber == roomNumber) return true; // Room found
        // Search in left and right subtrees
        return searchPreorderRec(root.left, roomNumber) || searchPreorderRec(root.right, roomNumber);
    }

    // Search for a room using postorder traversal
    public boolean searchPostorder(int roomNumber) {
        return searchPostorderRec(root, roomNumber);
    }

    // Recursive postorder search method
    private boolean searchPostorderRec(Room root, int roomNumber) {
        if (root == null) return false; // Room not found

        // Search in left and right subtrees first
        boolean foundInLeft = searchPostorderRec(root.left, roomNumber);
        boolean foundInRight = searchPostorderRec(root.right, roomNumber);

        // Check if the current room is the one we are looking for
        if (root.roomNumber == roomNumber) {
            System.out.print(root.roomNumber + " "); // Print current room number
            return true; // Room found
        }

        // Print the current room number if not found
        System.out.print(root.roomNumber + " ");
        return foundInLeft || foundInRight; // Return true if found in either subtree
    }

    // Main method to run the program
    public static void main(String[] args) {
        labact1 hotel = new labact1();
        Scanner scanner = new Scanner(System.in);
        
        // Insert sample room numbers
        hotel.insert(101);
        hotel.insert(102);
        hotel.insert(103);
        hotel.insert(104);
        hotel.insert(105);
        
        // User input for room search using preorder
        System.out.print("Enter room number to search (Preorder): ");
        int roomToSearchPre = scanner.nextInt();
        System.out.print("Preorder Search Path: ");
        boolean foundPre = hotel.searchPreorder(roomToSearchPre);
        System.out.println("\nRoom found (Preorder): " + foundPre);

        // User input for room search using postorder
        System.out.print("\nEnter room number to search (Postorder): ");
        int roomToSearchPost = scanner.nextInt();
        System.out.print("Postorder Search Path: ");
        boolean foundPost = hotel.searchPostorder(roomToSearchPost);
        System.out.println("\nRoom found (Postorder): " + foundPost);

        scanner.close(); // Close the scanner
    }
}

